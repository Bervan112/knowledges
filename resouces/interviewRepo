 
https://blog.csdn.net/weixin_42882274/article/details/81545871

https://www.jianshu.com/p/1ecbd1a88924

https://mp.weixin.qq.com/s/hRSuGzEGreN0pggETx7aBQ

https://www.jianshu.com/p/2d1a81b2dafc

https://www.cnblogs.com/chengxuyuanzhilu/p/7088316.html

https://www.cnblogs.com/lifelee/p/5306304.html

http://www.cnblogs.com/wxd0108/p/5479442.html

https://www.cnblogs.com/paddix/p/5374810.html

http://www.cnblogs.com/crawl/p/7703679.html


https://blog.csdn.net/qq_32734365/article/details/81413236

https://www.cnblogs.com/davidwang456/p/4309038.html


https://www.cnblogs.com/renzhitian/p/6853289.html

https://www.cnblogs.com/IcanFixIt/p/7518146.html

http://www.cnblogs.com/kyrin/p/5967620.html

https://blog.csdn.net/pipimob/article/details/79799793

https://www.cnblogs.com/half-two-feet/p/6409778.html
https://xulang110.iteye.com/blog/2296426


http://developer.51cto.com/art/200602/586203.htm

http://www.cnblogs.com/yuhangwang/p/5817930.html

http://www.cnblogs.com/JavaBlackHole/p/7726195.html

http://www.cnblogs.com/bigben0123/p/8920658.html

https://blog.csdn.net/e765741668/article/details/45234711

https://blog.csdn.net/u012319157/article/details/79111491

http://www.cnblogs.com/franknihao/p/8490416.html

http://www.cnblogs.com/Leo_wl/p/3866629.html


https://www.jianshu.com/p/b6ec06d6b594


https://www.cnblogs.com/savorboard/p/distributed-system-transaction-consistency.html

https://m.baidu.com/from=844b/s?word=kafka如何保证有序&ts=2165680&t_kt=0&ie=utf-8&fm_kl=021394be2f&rsv_iqid=2805810662&rsv_t=4953fgDMXHDUvYdx8uy5aJ0sP2t8AkiVaQri2vJ74SZo0pIzYmXdJ3nsDg&sa=is_4&ms=1&rsv_pq=2805810662&rsv_sug4=14359&ss=110&tj=1&inputT=7604&rq=kafka怎么保证


http://blog.51cto.com/11436461/2307790

http://www.cnblogs.com/dingyingsi/p/3760447.html

http://www.cnblogs.com/doit8791/p/7461479.html

http://www.cnblogs.com/geek6/p/3951677.html

https://www.cnblogs.com/Eilen/p/6751687.html


https://www.jianshu.com/p/9ec2db4189c1


https://m.jb51.net/article/122229.htm

https://blog.csdn.net/kai161/article/details/50820247

https://www.cnblogs.com/exceptioneye/p/5451960.html

https://www.cnblogs.com/luoyunfei99/articles/6803682.html


https://blog.csdn.net/guolong1983811/article/details/78604814

https://www.cnblogs.com/shanyou/p/5048099.html?utm_source=tuicool&utm_medium=referral

https://blog.csdn.net/qq_18425655/article/details/52163228

https://blog.csdn.net/kk936321732/article/details/45484121


https://www.cnblogs.com/landeanfen/p/7760803.html

https://blog.csdn.net/cckevincyh/article/details/54962920


https://www.cnblogs.com/aaron911/p/6213808.html

https://www.jianshu.com/p/453c6e7ff81c

https://blog.csdn.net/u013322876/article/details/72846054


https://blog.csdn.net/liangxw1/article/details/51197560

https://blog.csdn.net/u011405515/article/details/79190652

https://blog.csdn.net/u010651369/article/details/80886676

https://www.cnblogs.com/qiangxia/p/5261813.html


https://blog.csdn.net/hemin1003/article/details/82043611

http://www.runoob.com/redis/redis-tutorial.html


https://blog.csdn.net/sunlihuo/article/details/79700225


https://mp.weixin.qq.com/s/tBQ5tjSqk94_AtrgYgO0xA


https://blog.csdn.net/imi00/article/details/80948481

https://blog.csdn.net/smoothiemiss/article/details/79986860

https://www.cnblogs.com/NiceCui/p/7976595.html

https://blog.csdn.net/bskfnvjtlyzmv867/article/details/81044217

https://blog.csdn.net/kuajiejuneng/article/details/81639126#lean-apache-spark-2


https://blog.csdn.net/hjm4702192/article/details/80518856

https://blog.csdn.net/middleware2018/article/details/80355418

http://shiyanjun.cn/archives/1168.html

http://www.arccode.net/RESTful-best-practice.html

https://www.cnblogs.com/chulung/p/5653137.html

https://www.cnblogs.com/shanyou/p/5048099.html?utm_source=tuicool&utm_medium=referral


https://github.com/arccode/rest-api-scala

https://blog.csdn.net/congyihao/article/details/70195154


https://www.cnblogs.com/dolphin0520/p/3920373.html


https://www.cnblogs.com/chengxiao/p/6059914.html

（1）、根据服务层面：配置mysql性能优化参数；



（2）、从系统层面增强mysql的性能：优化数据表结构、字段类型、字段索引、分表，分库、读写分离等等。



（3）、从数据库层面增强性能：优化SQL语句，合理使用字段索引。



（4）、从代码层面增强性能：使用缓存和NoSQL数据库方式存储，如MongoDB/Memcached/Redis来缓解高并发下数据库查询的压力。



（5）、减少数据库操作次数，尽量使用数据库访问驱动的批处理方法。



（6）、不常使用的数据迁移备份，避免每次都在海量数据中去检索。



（7）、提升数据库服务器硬件配置，或者搭建数据库集群。



（8）、编程手段防止SQL注入：使用JDBC PreparedStatement按位插入或查询；正则表达式过滤（非法字符串过滤）

https://blog.csdn.net/fenglibing/article/details/10185805

https://www.cnblogs.com/hei12138/p/7805475.html

https://blog.csdn.net/rockpk008/article/details/25437415

https://ahujyy.iteye.com/blog/1544304/

https://blog.csdn.net/congyihao/article/details/70195154


https://www.cnblogs.com/duanxz/p/5143227.html

http://www.javacui.com/wenzhang/409.html


https://www.jianshu.com/p/d94615b89204


https://blog.csdn.net/luomingkui1109/article/details/77432192

https://m.jb51.net/article/108564.htm

https://www.cnblogs.com/longtaosoft/p/6627568.html

java基础，多线程，jvm，垃圾回收，spring请求流程，mybatis缓存机制，数据库的锁、索引、事务隔离，设计模式，简单的算法题，dubbo的原理、故障转移、负载均衡，elasticsearch原理，redis的持久化，一致性hash，kafka的一些问题，还有简单的算法题


https://www.cnblogs.com/xiaojunbo/p/7090742.html

https://blog.csdn.net/u012702547/article/details/53784992

https://blog.csdn.net/chunlongyu/article/details/52525604

https://www.cnblogs.com/liuyifan/p/7122792.html


https://www.ibm.com/developerworks/cn/opensource/os-cn-cas/


https://blog.csdn.net/sunxing007/article/details/5684265
